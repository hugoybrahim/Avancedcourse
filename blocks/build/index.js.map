{"version":3,"file":"index.js","mappings":";;;;;;;;;;AAAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA;WACA,iCAAiC,WAAW;WAC5C;WACA;;;;;WCPA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;;;;;;;;;;;ACNsD;AACmB;AACA;AACZ;AAAA;AAE7DA,oEAAiB,CACb,UAAU,EACV;EACIa,KAAK,EAAE,aAAa;EACpBC,WAAW,EAAE,+BAA+B;EAC5CC,IAAI,EAAE,QAAQ;EACdC,QAAQ,EAAE,QAAQ;EAClBC,UAAU,EAAE;IACRC,OAAO,EAAE;MACLC,IAAI,EAAE,QAAQ;MAAE;MAChBC,OAAO,EAAE,aAAa,CAAC;IAC3B,CAAC;IACDC,QAAQ,EAAE;MACNF,IAAI,EAAE,QAAQ,CAAC;IACnB,CAAC;IACDG,QAAQ,EAAE;MACNH,IAAI,EAAE,QAAQ,CAAC;IACnB;EACJ,CAAC;EACDI,IAAI,EAAGC,KAAK,IAAK;IACb,MAAM;MAAEP,UAAU,EAAE;QAACC;MAAO,CAAC;MAAEO,aAAa;MAAEC,SAAS;MAAEC;IAAU,CAAC,GAAGH,KAAK;;IAE5E;IACA,MAAMI,oBAAoB,GAAIC,UAAU,IAAK;MACzCJ,aAAa,CAAE;QAACP,OAAO,EAAEW;MAAU,CAAC,CAAC;IACzC,CAAC;;IAED;IACA,MAAMC,0BAA0B,GAAIC,KAAK,IAAK;MAC1CN,aAAa,CAAC;QACVJ,QAAQ,EAAEU,KAAK,CAACC,KAAK,CAACC,IAAI,CAACC,GAAG;QAC9BZ,QAAQ,EAAES,KAAK,CAACI;MACpB,CAAC,CAAC;IACN,CAAC;IAED,oBAAOzB,uDAAA,CAAAE,uDAAA;MAAAwB,QAAA,gBACH1B,uDAAA,CAACN,sEAAiB;QAAAgC,QAAA,gBACd5B,sDAAA,CAACN,4DAAS,CAAC;QAAA;UACPW,KAAK,EAAC,sCAAmC;UACzCwB,WAAW,EAAG,IAAM;UAAAD,QAAA,eAEpB5B,sDAAA,CAACL,2DAAQ;YAAAiC,QAAA,eACL5B,sDAAA,CAACP,8DAAW;cACRqC,KAAK,EAAC,mBAAmB,CAAC;cAAA;cAC1BC,KAAK,EAAGrB,OAAS,CAAC;cAAA;cAClBsB,QAAQ,EAAGZ,oBAAsB,CAAC;YAAA,CACrC;UAAC,CACI;QAAC,CACJ,CAAC,eACZpB,sDAAA,CAACN,4DAAS,CAAC;QAAA;UACPW,KAAK,EAAC,0BAAuB;UAC7BwB,WAAW,EAAG,IAAM;UAAAD,QAAA,eAEpB5B,sDAAA,CAACL,2DAAQ;YAAAiC,QAAA,eACL5B,sDAAA,CAACH,gEAAW;cACRoC,QAAQ,EAAGX,0BAA4B,CAAC;cAAA;cACxCX,IAAI,EAAC,OAAO,CAAC;cACb;cAAA;cACAuB,MAAM,EAAGA,CAAC;gBAACC;cAAI,CAAC,KAAK;gBACjB;gBACA,oBAAOnC,sDAAA,CAACoC,MAAM;kBAAClB,SAAS,EAAC,sEAAsE;kBAACmB,OAAO,EAAEF,IAAK;kBAAAP,QAAA,EAAC;gBAAiB,CAAQ,CAAC;cAC7I;YAAE,CACL;UAAC,CACI;QAAC,CACJ,CAAC;MAAA,CACG,CAAC,eACpB5B,sDAAA,CAACF,sEAAgB,CAAC;MAAA;QACdwC,KAAK,EAAC,UAAU,CAAC;QAAA;QACjB7B,UAAU,EAAGO,KAAK,CAACP,UAAY,CAAC;MAAA,CACnC,CAAC;IAAA,CACJ,CAAC;EACP,CAAC;EACD8B,IAAI,EAAEA,CAAA,KAAM;AAChB,CACJ,CAAC,C","sources":["webpack://blocks/external window \"ReactJSXRuntime\"","webpack://blocks/external window [\"wp\",\"blockEditor\"]","webpack://blocks/external window [\"wp\",\"blocks\"]","webpack://blocks/external window [\"wp\",\"components\"]","webpack://blocks/external window [\"wp\",\"serverSideRender\"]","webpack://blocks/webpack/bootstrap","webpack://blocks/webpack/runtime/compat get default export","webpack://blocks/webpack/runtime/define property getters","webpack://blocks/webpack/runtime/hasOwnProperty shorthand","webpack://blocks/webpack/runtime/make namespace object","webpack://blocks/./src/index.js"],"sourcesContent":["module.exports = window[\"ReactJSXRuntime\"];","module.exports = window[\"wp\"][\"blockEditor\"];","module.exports = window[\"wp\"][\"blocks\"];","module.exports = window[\"wp\"][\"components\"];","module.exports = window[\"wp\"][\"serverSideRender\"];","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { registerBlockType } from '@wordpress/blocks';\r\nimport { TextControl, PanelBody, PanelRow } from '@wordpress/components';\r\nimport { InspectorControls, MediaUpload } from '@wordpress/block-editor';  \r\nimport ServerSideRender from '@wordpress/server-side-render'; \r\n\r\nregisterBlockType(\r\n    'pg/basic',\r\n    {\r\n        title: \"Basic Block\",\r\n        description: \"Este es nuestro primer bloque\",\r\n        icon: \"smiley\",\r\n        category: \"layout\",\r\n        attributes: {\r\n            content: {\r\n                type: 'string', // Definimos el tipo de dato que debe esperar el componente. En este caso es un texto, por eso lo declaramos como string.\r\n                default: 'Hello world' // Definimos el valor por defecto.\r\n            },\r\n            mediaURL: {\r\n                type: 'string' // Definimos el tipo de dato que debe esperar el componente. En este caso es un texto (URL de la imagen), por eso lo declaramos como string.\r\n            },\r\n            mediaAlt: {\r\n                type: 'string' // Definimos el tipo de dato que debe esperar el componente. En este caso es un texto (Texto Alternativo de la imagen), por eso lo declaramos como string.\r\n            }\r\n        },\r\n        edit: (props) => {\r\n            const { attributes: {content}, setAttributes, className, isSelected} = props;\r\n        \r\n            // Función para guardar el atributo content\r\n            const handlerOnChangeInput = (newContent) => {\r\n                setAttributes( {content: newContent})\r\n            }\r\n        \r\n            // Función para guardar el atributo mediaURL y mediaAlt\r\n            const handlerOnSelectMediaUpload = (image) => {\r\n                setAttributes({\r\n                    mediaURL: image.sizes.full.url,\r\n                    mediaAlt: image.alt\r\n                })\r\n            }\r\n        \r\n            return <>\r\n                <InspectorControls>\r\n                    <PanelBody // Primer panel en la sidebar\r\n                        title=\"Modificar texto del Bloque Básico\"\r\n                        initialOpen={ true }\r\n                    >\r\n                        <PanelRow>\r\n                            <TextControl\r\n                                label=\"Complete el campo\" // Indicaciones del campo\r\n                                value={ content } // Asignación del atributo correspondiente\r\n                                onChange={ handlerOnChangeInput } // Asignación de función para gestionar el evento OnChange\r\n                            />\r\n                        </PanelRow>\r\n                    </PanelBody>\r\n                    <PanelBody // Segundo panel en la sidebar\r\n                        title=\"Seleccioná una imagen\"\r\n                        initialOpen={ true }\r\n                    >\r\n                        <PanelRow>\r\n                            <MediaUpload \r\n                                onSelect={ handlerOnSelectMediaUpload } // Asignación de función para gestionar el evento OnSelect\r\n                                type=\"image\" // Limita los tipos de archivos que se pueden seleccionar\r\n                                // Se envía el evento open y el renderizado del elemento que desencadenará la apertura de la librería, en este caso un botón\r\n                                render={ ({open}) => {\r\n                                    //Agregamos las clases de los botones de WordPress habituales para que mantenga el estilo dentro del editor\r\n                                    return <Button className=\"components-icon-button image-block-btn is-button is-default is-large\" onClick={open}>Elegir una imagen</Button>;\r\n                                }}\r\n                            />\r\n                        </PanelRow>\r\n                    </PanelBody>\r\n                </InspectorControls>\r\n                <ServerSideRender // Renderizado de bloque dinámico\r\n                    block=\"pg/basic\" // Nombre del bloque\r\n                    attributes={ props.attributes } // Se envían todos los atributos\r\n                />\r\n            </>\r\n        },\r\n        save: () => null\r\n    }\r\n)"],"names":["registerBlockType","TextControl","PanelBody","PanelRow","InspectorControls","MediaUpload","ServerSideRender","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","title","description","icon","category","attributes","content","type","default","mediaURL","mediaAlt","edit","props","setAttributes","className","isSelected","handlerOnChangeInput","newContent","handlerOnSelectMediaUpload","image","sizes","full","url","alt","children","initialOpen","label","value","onChange","onSelect","render","open","Button","onClick","block","save"],"sourceRoot":""}